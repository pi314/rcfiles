#!/usr/bin/env python3

import os
import re
import subprocess as sub
import sys
import shutil

from os.path import basename, splitext, join
from urllib.parse import urlparse


if sys.version_info.major < 3:
    print('Need Python3')
    exit(1)


def usage_and_exit():
    print('Usage:')
    print('    {} option=value video gif'.format(basename(sys.argv[0])))
    print('')
    print('Options:')
    print('    width=<width>')
    print('    height=<height>')
    print('    debug=1')
    exit(1)


def run_and_exit_on_fail(*cmd, capture_output=False):
    kwargs = {
        'stdout': sys.stdout,
        'stderr': sys.stderr,
    }
    if capture_output:
        kwargs['stdout'] = PIPE
        kwargs['stderr'] = PIPE

    p = sub.run(cmd, **kwargs)
    if p.returncode:
        exit(p.returncode)

    return p


def parse_args():
    video_url = None
    video = None
    gif = None
    width = None
    height = None
    debug = False

    for i in sys.argv[1:]:
        if i.startswith('width='):
            width = int(i[6:])

        elif i.startswith('height='):
            height = int(i[7:])

        elif i == 'debug=1':
            debug = True

        elif video is None:
            video = i

        elif gif is None:
            gif = i

    if video is None:
        usage_and_exit()

    if re.match(r'https?://', video):
        video_url = video
        video = basename(urlparse(video_url).path)

    if gif is None:
        gif = splitext(video)[0] + '.gif'

    return {
            'video_url': video_url,
            'video': video,
            'gif': gif,
            'width': width,
            'height': height,
            'debug': debug,
    }


def main():
    args = parse_args()

    video = args['video']
    video_url = args['video_url']
    gif = args['gif']
    width = args['width']
    height = args['height']

    tmp_dir = gif + '.tmp'

    if video_url:
        video = join(tmp_dir, video)

    palette = join(tmp_dir, gif + '.palette.png')

    if width and height:
        ffmpeg_filters = "scale={}:{}:flags=lanczos".format(width, height)
        phase1_filter = ffmpeg_filters + ",palettegen"
        phase2_filter = ffmpeg_filters + " [x]; [x][1:v] paletteuse"
    else:
        phase1_filter = "palettegen"
        phase2_filter = "paletteuse"

    os.mkdir(tmp_dir)

    if video_url:
        run_and_exit_on_fail('aria2c', video_url, '--out', video)

    run_and_exit_on_fail('ffmpeg', '-i', video, '-vf', phase1_filter, palette)
    run_and_exit_on_fail('ffmpeg', '-i', video, '-i', palette, '-filter_complex', phase2_filter, gif)

    if not args['debug']:
        shutil.rmtree(tmp_dir)


if __name__ == '__main__':
    main()
