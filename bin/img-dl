#!/usr/bin/env python

### img-dl is a small script that takes stdin as a (image) URL list,
### download all of them and rename the files in the way the arguments describe.
###
### Basic usage:
### $ img-dl
### (and then paste your URLs to stdin)
###
### Program flow
###
### 1.  Command line arguments parsing.
###     See -h for a complete list.
###
### 2.  Stdin parsing:
###     Each line could be a URL, a file name, or a command.
###     Commands start with a colon, see :help for a complete list.
###
### 3.  Task generation:
###     Transforms URL list to file name list.
###
### 4.  Task sorting:
###     Sorts tasks to prevent files got overridden.
###
### 5.  User confirm:
###     Summarize the tasks and ask if you want to execute them.
###     You can choose 's' to store the inputs and edit them afterwards.
###
### 6.  Task execution:
###     Actually rename/download the files.
###

# TODO: retry certain URLs with different formats (like imgur.com and twitter)

import argparse
import os
import re
import shutil
import subprocess as sub
import sys

from datetime import datetime
from os import getcwd
from os.path import splitext, basename, exists, isfile
from urllib.parse import urlparse, parse_qs, urlencode, urlunparse, ParseResult


def print_err(*args, **kwargs):
    print(*args, file=sys.stderr, **kwargs)


if sys.version_info.major < 3:
    print_err('Need Python3')
    exit(1)


rightnow = datetime.now()


class ParsedURL:
    def __init__(self, url):
        o = urlparse(url)
        self.url = url
        self.scheme = o.scheme
        self.netloc = o.netloc
        self.path = o.path
        self.params = o.params
        self.query = parse_qs(o.query)
        self.hostname = o.hostname

        # unpack 1-item list
        for key, value in self.query.items():
            if type(value) is list and len(value) == 1:
                self.query[key] = value[0]

    def unparse(self):
        return urlunparse(ParseResult(
                scheme=self.scheme,
                netloc=self.netloc,
                path=self.path,
                params=self.params,
                query=urlencode(self.query, doseq=True),
                fragment='',
                ))

    def __repr__(self):
        return 'ParsedURL(scheme={scheme}, netloc={netloc}, path={path}, params={params}, query={query})'.format(
                scheme=repr(self.scheme),
                netloc=repr(self.netloc),
                path=repr(self.path),
                params=repr(self.params),
                query=repr(self.query),
                )


class Config:
    def __init__(self, args):
        self.start = args.start
        self.width = args.width
        self.fmt = ' '.join(args.fmt)
        self.ext = args.ext
        self.downloader = args.downloader
        self.session_file = args.load

    def __repr__(self):
        return 'Config(start={start}, width={width}, ext={ext}, downloader={downloader}, fmt={fmt}, session={session})'.format(
                start=self.start,
                width=self.width,
                ext=hl_str(self.ext),
                downloader=self.downloader,
                fmt=hl_str(self.fmt),
                session=self.session_file,
                )


class Task:
    def __init__(self, url, index):
        self.url = url
        self.index = index
        self.ourl = url

        o = ParsedURL(url)

        if o.path.endswith(('.jpg', '.png')):
            self.ext = splitext(o.path)[1]

        elif o.query.get('format') in ('jpg', 'png'):
            self.ext = '.' + o.query['format']

        else:
            self.ext = None

        self.fname = basename(o.path)
        self.oname = splitext(basename(o.path))[0]

        self.isfile = exists(url) and isfile(url)

    def __repr__(self):
        return 'Task(index={index}, ext={ext}, fname={fname}, url={url})'.format(
                index=self.index,
                ext=hl_str(self.ext),
                fname=hl_str(self.fname),
                url=hl_str(self.url),
                )


def color_str(s, color):
    color_code = {
            'black': 0,
            'red': 1,
            'green': 2,
            'yellow': 3,
            'blue': 4,
            'magenta': 5,
            'cyan': 6,
            'white': 7,
            }
    return '\033[1;3{c}m{s}\033[m'.format(c=color_code.get(color), s=s)


def hl_str(s, color='magenta'):
    return '[' + color_str(s, color) + ']'


def parse_line(config, url_list, line):
    if line.startswith(':fmt='):
        config.fmt = line[len(':fmt='):]

    elif line.startswith(':start='):
        config.start = int(line[len(':start='):])

    elif line.startswith(':width='):
        config.width = int(line[len(':width='):])

    elif line.startswith(':ext='):
        config.ext = line[len(':ext='):]

    elif line == ':help':
        print_err('#', '=' * 80)
        print_err('#', ':fmt={}'.format(config.fmt))
        print_err('#', ':start={}'.format(config.start))
        print_err('#', ':width={}'.format(config.width))
        print_err('#', ':ext={}'.format(config.ext))
        print_err('#', ':session={}'.format(config.session_file))
        if len(url_list):
            print_err('#', '-' * 80)
            for i in url_list:
                print_err('#', i)
        print_err('#', '=' * 80)

    elif line.startswith(':session='):
        give_session_id = line[len(':session='):]
        if give_session_id:
            config.session_file = give_session_id

    elif line.startswith(':'):
        print_err('Unknown command:', line)
        exit(1)

    else:
        url_list.append(line)


def gen_task_list(config, url_list):
    task_list = []

    index = config.start
    ext_buckets = {}
    for u in url_list:
        t = Task(u, index)
        task_list.append(t)
        index += 1

        if t.ext not in ext_buckets:
            ext_buckets[t.ext] = 1
        else:
            ext_buckets[t.ext] += 1

    config.width = max(config.width, len(str(index)))

    if None in ext_buckets:
        del ext_buckets[None]

    most_ext = None
    if not ext_buckets:
        if config.ext != '*':
            most_ext = config.ext
    else:
        most_ext = max(ext_buckets.items(), key=lambda x: x[1])[0]

    if not config.fmt:
        fmt = '{oname}' if len(task_list) == 1 else '{idx}'

    else:
        fmt = config.fmt
        if len(task_list) > 1:
            if '{idx}' not in fmt:
                fmt += ('' if fmt.endswith(('-', ' ')) else ' - ') + '{idx}'

    fmt = fmt.replace('{idx}', '{idx:0>{width}}')

    if not fmt.endswith('{ext}'):
        fmt += '{ext}'

    for t in task_list:
        if t.ext is None:
            t.ext = '.' + most_ext.lstrip('.')

        t.fname = fmt.format(
                idx=t.index, width=config.width, oname=t.oname, ext=t.ext,
                here=basename(getcwd()),
                today='{t.year:>04}{t.month:>02}{t.day:>02}'.format(t=rightnow),
                now='{:>02}{:>02}'.format(rightnow.hour, rightnow.minute),
                )

        o = ParsedURL(t.url)
        if o.netloc == 'imgur.com':
            o.netloc = 'i.imgur.com'
            o.path = o.path + t.ext
            t.url = o.unparse()

        elif o.netloc == 'pbs.twimg.com' and o.query.get('name') != 'orig':
            if 'name' in o.query and o.query['name'] != 'orig':
                o.query['name'] = 'orig'
                t.url = o.unparse()

    ret = []
    for t in task_list:
        if t.url == t.fname:
            continue

        ret.append(t)

    return ret


def sort_task_list(task_list):
    ret = []
    remain = task_list

    cont = True
    while cont:
        pending = []
        cont = False
        for t in remain:
            ok = False
            if not exists(t.fname):
                ok = True
            elif exists(t.fname) and t.fname in {tt.url for tt in ret}:
                ok = True
            else:
                ok = False

            if ok:
                ret.append(t)
                cont = True
            else:
                pending.append(t)

        remain = pending

    if len(remain):
        print_err('Cannot handle some tasks')
        for t in ret:
            print_err(hl_str('ok', 'green'), hl_str(t.fname, 'green'), '<=', hl_str(t.url, 'green'))

        for t in remain:
            print_err(hl_str('no', 'red'), hl_str(t.fname, 'red'), '<=', hl_str(t.url, 'red'))

        exit(1)

    return ret


def prompt_confirm():
    while True:
        with open('/dev/tty') as tty:
            stdin_backup, sys.stdin = sys.stdin, tty
            try:
                ret = input('Continue? {}Yes{}no{}store{} '.format(
                    color_str('[', 'black'),
                    color_str('/', 'black'),
                    color_str('/', 'black'),
                    color_str(']', 'black'),
                    )).strip().lower()
                if not ret:
                    ret = 'Y'
            except (EOFError, KeyboardInterrupt):
                ret = 'n'

            sys.stdin = stdin_backup

        if ret in 'Yyns':
            break

    return ret


def execute_tasks(config, task_list):
    for t in task_list:
        if t.isfile and not exist(t.url):
            print_err('File not exists')
            print_err(hl_str(t.fname, 'red'), '<=', hl_str(t.url, 'red'))
            exit(1)

    for t in task_list:
        if t.isfile:
            shutil.move(t.url, t.fname)

    if config.downloader == 'aria2c':
        aria2c_input = []
        for t in task_list:
            if t.url.startswith(('http://', 'https://')):
                aria2c_input.append(t.url)
                aria2c_input.append('  out={}'.format(t.fname))

        if aria2c_input:
            try:
                sub.run(['aria2c', '-i', '-'], input='\n'.join(aria2c_input).encode('utf8'))
            except sub.CalledProcessError:
                exit(1)

    else:
        print_err('Unsupported downloader:', config.downloader)


def store_session(config, task_list):
    if not config.session_file:
        config.session_file = 'img-dl.session.{t.year:>04}{t.month:>02}{t.day:>02}.{t.hour:>02}{t.minute:>02}'.format(
                t=rightnow)

    with open(config.session_file, 'wb') as f:
        def writeline(line):
            f.write((line + '\n').encode('utf-8'))

        writeline(':start={}'.format(config.start))
        writeline(':width={}'.format(config.width))
        writeline(':ext={}'.format(config.ext))
        writeline(':fmt={}'.format(config.fmt))

        for t in task_list:
            writeline(t.url)

    print_err('Session file:', hl_str(config.session_file))


def main():
    parser = argparse.ArgumentParser(description='img-dl')
    parser.add_argument('-s', '--start', dest='start', default=1, type=int, help='Starting index number')
    parser.add_argument('-w', '--width', dest='width', default=1, type=int, help='The width for index number')
    parser.add_argument('-e', '--ext', dest='ext', default='*', type=str, help='Preferred img format')
    parser.add_argument('-d', '--downloader', default='aria2c', choices=['aria2c'], type=str)
    parser.add_argument('-l', '--load', default=None, type=str, help='session file')
    parser.add_argument('-n', '--dry', default=False, action='store_true', help='dry run')
    parser.add_argument('fmt', nargs='*')

    args = parser.parse_args()

    config = Config(args)
    if sys.stdin.isatty():
        print(config)

    try:
        url_list = []
        if config.session_file:
            if not exists(config.session_file):
                print_err('Session file not exist:', hl_str(config.session_file))
                exit(1)

            with open(config.session_file, 'rb') as f:
                for line in f.readlines():
                    line = line.decode('utf-8').rstrip('\n')
                    if line.startswith(':session'):
                        continue
                    parse_line(config, url_list, line)

        else:
            for line in sys.stdin:
                parse_line(config, url_list, line.rstrip('\n'))
                if line.startswith(':'):
                    print_err(config)

        if not sys.stdin.isatty():
            print_err(config)

        task_list = gen_task_list(config, url_list)
        task_list = sort_task_list(task_list)

        for t in task_list:
            print(hl_str(t.fname), '<=', hl_str(t.url))

        if not task_list:
            exit(0)

        confirm = prompt_confirm()

        if confirm == 'n':
            exit(1)

        elif args.dry:
            exit(0)

        elif confirm in 'Yy':
            execute_tasks(config, task_list)

        elif confirm == 's':
            store_session(config, task_list)

    except KeyboardInterrupt:
        print_err('KeyboardInterrupt')

main()
