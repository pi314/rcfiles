#!/usr/bin/env python3

### img-dl is a small script that takes stdin as a (image) URL list,
### download all of them and rename the files in the way the arguments describe.
###
### Basic usage:
### $ img-dl
### (and then paste your URLs to stdin)
###
### Program flow
###
### 1.  Command line arguments parsing.
###     See -h for a complete list.
###
### 2.  Stdin parsing:
###     Each line could be a URL, a file name, or a command.
###     Commands start with a colon, see :help for a complete list.
###
###     For :fmt, the following directives are supported:
###         {idx}: index number, will be 0-padding to match the largest one
###         {oname}: original "file name" (i.e. the basename of URL path)
###         {here}: basename of current working directory
###         {today}: Current date in format YYYYMMDD
###         {now}: Current time in format hhmm
###
###         For example, :fmt={here}-{today}-{idx} may produce imgdl-20201011-01.jpg
###
### 3.  Task generation:
###     Transforms URL list to file name list.
###
### 4.  Task sorting:
###     Sorts tasks to prevent files got overridden.
###
### 5.  User confirm:
###     Summarize the tasks and ask if you want to execute them.
###     You can choose 's' to store the inputs and edit them afterwards.
###
### 6.  Task execution:
###     Actually rename/download the files.
###

# TODO: rewrite


def print_err(*args, **kwargs):
    print(*args, file=sys.stderr, **kwargs)


import sys

if sys.version_info.major < 3:
    print_err('Need Python3')
    exit(1)

import argparse
import os
import re
import shutil
import subprocess as sub
import tempfile
import readline

from datetime import datetime
from os import getcwd
from os.path import splitext, basename, dirname, exists, isfile, expanduser, join, relpath
from urllib.parse import urlparse, parse_qs, urlencode, urlunparse, ParseResult

img_exts = ('.jpg', '.png', '.jpeg', '.gif')


rightnow = datetime.now()


class ParsedURL:
    def __init__(self, url):
        o = urlparse(url)
        self.url = url
        self.scheme = o.scheme
        self.netloc = o.netloc
        self.path = o.path
        self.params = o.params
        self.query = parse_qs(o.query)
        self.hostname = o.hostname

        # unpack 1-item list
        for key, value in self.query.items():
            if type(value) is list and len(value) == 1:
                self.query[key] = value[0]

    def unparse(self):
        return urlunparse(ParseResult(
                scheme=self.scheme,
                netloc=self.netloc,
                path=self.path,
                params=self.params,
                query=urlencode(self.query, doseq=True),
                fragment='',
                ))

    def __repr__(self):
        return 'ParsedURL(scheme={scheme}, netloc={netloc}, path={path}, params={params}, query={query})'.format(
                scheme=repr(self.scheme),
                netloc=repr(self.netloc),
                path=repr(self.path),
                params=repr(self.params),
                query=repr(self.query),
                )


class Options:
    def __init__(self, args):
        self.start = args.start
        self.width = args.width
        self.folder = '.'
        self.fmt = ' '.join(args.fmt)
        self.ext = args.ext
        self.downloader = args.downloader

        self.reset_invalid_values()

    def reset_invalid_values(self):
        self.start = int(self.start) if self.start is not None else 1

        self.width = int(self.width) if self.width is not None else 1

        if self.ext is None:
            self.ext = '*'

        if self.downloader is None:
            self.downloader = 'aria2c'

        if self.fmt and '/' in self.fmt:
            self.folder, self.fmt = os.path.split(self.fmt)

    def __repr__(self):
        return 'Options(start={start}, width={width}, ext={ext}, fmt={fmt}, downloader={downloader}, session={session})'.format(
                start=self.start,
                width=self.width,
                ext=hl_str(self.ext),
                fmt=hl_str(join(self.folder, self.fmt) if self.folder != '.' else self.fmt),
                downloader=hl_str(self.downloader),
                session=hl_str(self.session_file),
                )


class Task:
    def __init__(self, url, index):
        self.url = url
        self.index = index
        self.ourl = url

        o = ParsedURL(url)

        if o.path.lower().endswith(img_exts):
            self.ext = splitext(o.path)[1]

        elif '.' + o.query.get('format', '').lower() in img_exts:
            self.ext = '.' + o.query['format']

        else:
            self.ext = None

        self.folder = '.'
        self.fname = basename(o.path)
        self.oname = splitext(basename(o.path))[0]

        self.isfile = exists(expanduser(url)) and isfile(expanduser(url))

    @property
    def path(self):
        if self.folder == '.':
            return self.fname

        else:
            return join(self.folder, self.fname)

    def __repr__(self):
        return 'Task(index={index}, ext={ext}, path={path}, url={url})'.format(
                index=self.index,
                ext=hl_str(self.ext),
                path=hl_str(self.path),
                url=hl_str(self.url),
                )


def color_str(s, color):
    color_code = {
            'black': 0,
            'red': 1,
            'green': 2,
            'yellow': 3,
            'blue': 4,
            'magenta': 5,
            'cyan': 6,
            'white': 7,
            }
    return '\033[1;3{c}m{s}\033[m'.format(c=color_code.get(color), s=s)


def hl_str(s, color='magenta'):
    return '[' + color_str(s, color) + ']'


def construct_task_list(options, url_list):
    task_list = []

    index = options.start
    ext_buckets = {}
    for u in url_list:
        t = Task(u, index)
        task_list.append(t)
        index += 1

        if t.ext not in ext_buckets:
            ext_buckets[t.ext] = 1
        else:
            ext_buckets[t.ext] += 1

    options.width = max(options.width, len(str(index)))

    if None in ext_buckets:
        del ext_buckets[None]

    most_ext = None
    if not ext_buckets:
        if options.ext != '*':
            most_ext = options.ext
        else:
            print_err('Cannot infer file ext')
            exit(1)
    else:
        most_ext = max(ext_buckets.items(), key=lambda x: x[1])[0]

    if not options.fmt:
        fmt = '{oname}' if len(task_list) == 1 else '{idx}'

    else:
        fmt = options.fmt

        if len(task_list) > 1:
            if '{idx}' not in fmt and '{oname}' not in fmt:
                fmt += ('' if fmt.endswith(('-', ' ')) else ' - ') + '{idx}'

    fmt = fmt.replace('{idx}', '{idx:0>{width}}')

    if fmt.endswith(img_exts):
        fmt = splitext(fmt)[0]

    if not fmt.endswith('{ext}'):
        fmt += '{ext}'

    for t in task_list:
        if t.ext is None:
            t.ext = '.' + most_ext.lstrip('.')

        t.folder = options.folder
        t.fname = fmt.format(
                idx=t.index, width=options.width, oname=t.oname, ext=t.ext,
                here=basename(getcwd()),
                today='{t.year:>04}{t.month:>02}{t.day:>02}'.format(t=rightnow),
                now='{:>02}{:>02}'.format(rightnow.hour, rightnow.minute),
                )

        o = ParsedURL(t.url)
        if o.netloc == 'imgur.com':
            o.netloc = 'i.imgur.com'
            if '.' not in o.path:
                o.path = o.path + t.ext
            t.url = o.unparse()

        elif o.netloc == 'pbs.twimg.com':
            if 'name' in o.query and o.query['name'] != 'orig':
                o.query['name'] = 'orig'
                t.url = o.unparse()

    ret = []
    for t in task_list:
        if t.url == t.path:
            continue

        ret.append(t)

    return ret


def sort_task_list(task_list):
    ret = []
    remain = task_list

    cont = True
    while cont:
        pending = []
        cont = False
        for t in remain:
            ok = False
            if not exists(t.path):
                ok = True
            else:
                if relpath(t.path) in {relpath(expanduser(tt.url)) for tt in ret}:
                    ok = True
                else:
                    ok = False

            if ok:
                ret.append(t)
                cont = True
            else:
                pending.append(t)

        remain = pending

    if len(remain):
        print_err('Cannot handle some tasks')
        for t in ret:
            print_err(hl_str('ok', 'green'), hl_str(t.path, 'green'), '<=', hl_str(t.url, 'green'))

        for t in remain:
            print_err(hl_str('no', 'red'), hl_str(t.path, 'red'), '<=', hl_str(t.url, 'red'))

        exit(1)

    return ret


def pause_due_to_error():
    try:
        input('Press Enter for editing or Ctrl-C to leave> ')
    except (EOFError, KeyboardInterrupt) as e:
        print_err(type(e).__name__)
        exit(1)


def prompt_confirm():
    while True:
        try:
            print('Continue? {}Yes{}no{}vim{}'.format(
                color_str('[', 'black'),
                color_str('/', 'black'),
                color_str('/', 'black'),
                color_str(']', 'black'),
                ), end=' ')
            ret = input().strip().lower()
            if not ret:
                ret = 'Y'
        except (EOFError, KeyboardInterrupt):
            ret = 'n'

        if ret in 'Yynv':
            break

    return ret


def execute_tasks(options, task_list):
    for t in task_list:
        if t.isfile and not exists(expanduser(t.url)):
            print_err('File not exists')
            print_err(hl_str(t.path, 'red'), '<=', hl_str(expanduser(t.url), 'red'))
            exit(1)

    for t in task_list:
        if t.isfile:
            shutil.move(expanduser(t.url), t.path)

    if options.downloader == 'aria2c':
        aria2c_input = []
        for t in task_list:
            if t.url.startswith(('http://', 'https://')):
                aria2c_input.append(t.url)
                aria2c_input.append('  out={}'.format(t.path))

        if aria2c_input:
            with tempfile.NamedTemporaryFile(mode='w+', encoding='utf8', suffix='.img-dl.tmp') as tf:
                for line in aria2c_input:
                    tf.write(line + '\n')

                tf.flush()

                try:
                    sub.call(['aria2c', '-i', tf.name])
                except sub.CalledProcessError:
                    exit(1)

    else:
        print_err('Unsupported downloader:', options.downloader)


def main():
    if not sys.stdout.isatty():
        exit(1)

    parser = argparse.ArgumentParser(description='img-dl')
    parser.add_argument('-s', '--start', dest='start', help='Starting index number')
    parser.add_argument('-w', '--width', dest='width', help='The width for index number')
    parser.add_argument('-e', '--ext', dest='ext', type=str, help='Preferred img format')
    parser.add_argument('-d', '--downloader', choices=['aria2c'], type=str)
    parser.add_argument('-n', '--dry', default=False, action='store_true', help='dry run')
    parser.add_argument('-y', '--yes', default=False, action='store_true', help='Yes')
    parser.add_argument('fmt', nargs='*', help='Format. Available directives: {idx}, {oname}, {here}, {today}, {now}')

    args = parser.parse_args()

    options = Options(args)

    lines = []

    # Start a vim directly when stdin is a tty
    if sys.stdin.isatty():
        confirm = 'v'

    # Or read stdin as initial content
    else:
        lines += [line.rstrip() for line in sys.stdin.readlines()]
        sys.stdin.close()
        sys.stdin = open('/dev/tty')
        confirm = None

    parse_error = []

    while True:
        if confirm == 'v':
            with tempfile.NamedTemporaryFile(mode='w+', encoding='utf8', prefix=options.fmt.replace('/', '_'), suffix='.img-dl.tmp') as tf:
                for line in lines:
                    tf.write(line + '\n')

                tf.flush()

                jump_to = '+normal G'
                if parse_error:
                    jump_to = '+' + str(parse_error[0])

                parse_error = []

                sub.call(['vim', tf.name, jump_to], stdin=open('/dev/tty'))

                with open(tf.name, mode='r', encoding='utf8') as f:
                    lines = [line.rstrip() for line in f.readlines()]

        # Input parsing
        any_parse_errors = False
        for idx, line in enumerate(lines):
            if not line:
                continue

            if line.startswith(('http://', 'https://')):
                continue

            elif not isfile(expanduser(line)):
                parse_error = (idx+1, line)
                print_err('Error at line', idx+1, ':', line)
                any_parse_errors = True

        if any_parse_errors:
            pause_due_to_error()
            continue

        print('=' * 50)

        task_list = construct_task_list(options, [line for line in lines if line])
        task_list = sort_task_list(task_list)

        for t in task_list:
            print(hl_str(t.path), '<=', hl_str(t.url, 'red' if (t.isfile and not exists(expanduser(t.url))) else 'magenta'))

        if not task_list:
            exit(0)

        if args.dry:
            print_err('(dry run)')
            exit(1)

        confirm = 'Y' if args.yes else prompt_confirm()

        if confirm == 'n':
            exit(1)

        elif args.dry:
            exit(0)

        elif confirm in 'Yy':
            break

    execute_tasks(options, task_list)


if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print_err('KeyboardInterrupt')

else:
    raise Exception('import no no')
