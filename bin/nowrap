#!/usr/bin/env python

from __future__ import print_function

import re
import sys

from subprocess import check_output
from unicodedata import east_asian_width


PY = 2 if (sys.version_info.major < 3) else 3
color_code_rpattern = re.compile(r'(m(?:[\d;]+)?\[' + '\033)')


def cwidth(c):
    return 1 + (east_asian_width(c) in 'WF')


class StringSlice(object):
    def __init__(self, s, l):
        self.s = s
        self.l = l


def cut(width, line):
    buf = ''
    buf_width = 0

    color_escape = ''

    for i in range(len(line)):
        c = line[i]
        c_width = cwidth(c)

        if color_escape:
            if c in '0123456789;[':
                color_escape += c
                continue
            elif c == 'm':
                buf += (color_escape + c)
                color_escape = ''
                continue
            else:
                buf += (color_escape + c)
                color_escape = ''

        else:
            if c == '\033':
                color_escape += c
                continue

        if buf_width + c_width == width:
            return (
                    StringSlice(buf + line[i], buf_width + c_width),
                    StringSlice('', 0),
                    StringSlice(line[i+1:], 0)
            )

        if buf_width + c_width > width:
            return (
                    StringSlice(buf, buf_width),
                    StringSlice(line[i], c_width),
                    StringSlice(line[i+1:], 0)
            )

        buf += c
        buf_width += c_width

    return (
            StringSlice(buf, buf_width),
            StringSlice('', 0),
            StringSlice('', 0)
    )


def usage():
    def print_err(*args, **kwargs):
        print(*args, file=sys.stderr, **kwargs)

    print_err('Usage:')
    print_err('    nowrap [options]')
    print_err()
    print_err('Options:')
    print_err('    -w width     Output width limit')
    print_err('    -c cut       Cut-off width')
    print_err('    -f fill      Fill character')
    print_err()
    print_err('Examples:')
    print_err('    nowrap')
    print_err('    nowrap -w 50')
    print_err('    nowrap -w 50 -c 20')
    print_err('    nowrap -w 50 -c 20 -f .')
    exit(1)


def main():
    options = {
            'width': int(check_output(['tput', 'cols'])),
            'cut': 0,
            'fill': ' ',
            }

    parse_options = {
            '-w': ('width', int),
            '-c': ('cut', int),
            '-f': ('fill', str),
            }

    while len(sys.argv):
        arg = sys.argv[0]
        if arg in ('-h', '--help'):
            usage()

        elif arg in parse_options:
            sys.argv.pop(0)
            if not sys.argv:
                usage()

            o = parse_options[arg]
            options[o[0]] = o[1](sys.argv.pop(0))

        else:
            sys.argv.pop(0)

    for line in sys.stdin:
        if PY == 2:
            line = line.decode('utf-8')

        line = line.rstrip()

        color_begin = ''
        if options['cut']:
            c = cut(options['cut'], line)
            line = (options['fill'] * (c[0].l + c[1].l - options['cut'])) + c[2].s
            m = color_code_rpattern.search(c[0].s[::-1] or '')
            if m:
                color_begin = m.group(1)[::-1]

        c = cut(options['width'], line)

        color_close = ''
        if c[2]:
            m = color_code_rpattern.search(c[2].s[::-1] or '')
            if m:
                color_close = m.group(1)[::-1]

        print(color_begin + c[0].s + color_close)


if __name__ == '__main__':
    main()
