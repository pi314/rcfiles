#!/usr/bin/env python3

import argparse
import os
import subprocess as sub
import sys

from os.path import basename, splitext, exists, dirname, join
from types import SimpleNamespace
from urllib.parse import urlparse


if sys.version_info.major < 3:
    print('Need Python3')
    exit(1)


def run_and_exit_on_fail(*cmd, capture_output=False):
    kwargs = {
        'stdout': sys.stdout,
        'stderr': sys.stderr,
    }
    if capture_output:
        kwargs['stdout'] = PIPE
        kwargs['stderr'] = PIPE

    p = sub.run(cmd, **kwargs)
    if p.returncode:
        exit(p.returncode)

    return p


def join_url_with_item(base_url, item):
    i = urlparse(item)
    if i.scheme:
        return item

    if item.startswith('/'):
        return '{sch}://{netloc}{path}'.format(
                sch=base_url.scheme,
                netloc=base_url.netloc,
                path=item,
                )

    return '{sch}://{netloc}{path}'.format(
            sch=base_url.scheme,
            netloc=base_url.netloc,
            path=dirname(base_url.path) + '/' + item,
            )


def menu(title, items, default=None):
    if len(items) == 1:
        return items[0]

    if default is None:
        default = len(items)

    while True:
        for idx, item in enumerate(items):
            print('{}) {} {}'.format(idx + 1, item, '(exists)' if exists(basename(item)) else ''))

        choose = input('Choose (default={})> '.format(default))

        if choose.strip() == '':
            return items[default - 1]

        try:
            if (int(choose) - 1) not in range(len(items)):
                continue

            return items[int(choose) - 1]
        except (ValueError, IndexError):
            pass


def parse_m3u8(m3u8_fname):
    ret = SimpleNamespace()

    ret.sublists = []
    ret.videos = []
    with open(m3u8_fname) as f:
        lines = list(map(str.strip, f.readlines()))

        # Over design:
        # Parse m3u8 item with a queue and a tiny state machine
        # If complex format needs to be check, this might help
        while len(lines):
            item = lines.pop(0)

            if item.startswith('#'):
                pass

            elif item.endswith('.m3u8'):
                ret.sublists.append(item)

            elif item.endswith('.ts'):
                ret.videos.append(item)

            else:
                print('Dont know what is', item)

    return ret


def download_and_merge_ts_videos(videos):
    width = max(map(lambda x: len(str(x)), range(len(videos))))

    # Create tmp video list file and feed to aria2c
    vlist_fname = basename(os.getcwd()) + '.m3u8'
    with open(vlist_fname, 'w') as f:
        local_vlist = []
        for idx, item in enumerate(videos):
            local_vitem = '{idx:0>{width}}-{item}'.format(
                    idx=idx, width=width, item=basename(item))
            f.write(item + '\n')
            f.write('  out={}\n'.format(local_vitem))
            local_vlist.append(local_vitem)

    run_and_exit_on_fail('aria2c', '-i', vlist_fname)

    # Merge .ts files
    vfname = basename(os.getcwd()) + '.ts'
    with open(vfname, 'wb') as output_v:
        for v in local_vlist:
            with open(v, 'rb') as sub_v:
                output_v.write(sub_v.read())

    return vfname


def download_url(url):
    ''' This function downloads the url, and check if there are sublists in it
    If the url is already a video, download it directly
    If it's a meta list, prompt to user to choose one and recursively call itself
    If it's a list of (ts) video files, download and merge them

    Returns the (merged) video file path
    '''

    print('[download_url]', url.geturl())
    fname = basename(url.path)

    if exists(fname):
        print('[download_url]', fname, 'already exists')
        print('[download_url] Renamed as', fname + '.backup')
        os.rename(fname, fname + '.backup')

    run_and_exit_on_fail('aria2c', url.geturl())

    if fname.endswith('mp4'):
        return fname

    if fname.endswith('m3u8'):
        content = parse_m3u8(fname)
        if content.sublists and content.videos:
            print('[download_url] Error: cannot handle mixed m3u8 and ts items')
            return

        if content.sublists:
            print('[download_url] Found sub-lists')
            choose = menu('Choose one to download', content.sublists)
            return download_url(urlparse(join_url_with_item(url, choose)))

        if content.videos:
            videos = []
            for v in content.videos:
                videos.append(join_url_with_item(url, v))

            return download_and_merge_ts_videos(videos)


def ffmpeg_video(video, output):
    if video == output:
        print('[ffmpeg_video] No need to ffmpeg')

    run_and_exit_on_fail('ffmpeg', '-i', video, output)


def main():
    parser = argparse.ArgumentParser(description='Download twitter m3u8 video', prog='twitter-vdl')
    parser.add_argument('--out', '--output', dest='output')
    parser.add_argument('url', type=urlparse)

    args = parser.parse_args()

    if not args.output:
        oname, ext = splitext(basename(args.url.path))
        if ext == '.m3u8':
            ext = ''

        args.output = oname + ext

    if args.url.scheme not in ('http', 'https'):
        parser.print_help(sys.stderr)
        exit(1)

    # Create tmp dir for tmp files
    tmp_dir, ext = splitext(args.output)

    if exists(tmp_dir):
        print('[tmp_dir]', tmp_dir, 'already exists')
        exit(1)

    os.mkdir(tmp_dir)

    # chdir into tmp dir to prevent tmp files spread out
    cwd = os.getcwd()

    os.chdir(tmp_dir)
    video = download_url(args.url)
    os.chdir(cwd)

    if video and ext in ('.mp4',):
        ffmpeg_video(join(tmp_dir, video), args.output)


if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print('KeyboardInterrupt')
        exit(1)
