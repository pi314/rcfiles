setopt PROMPT_SUBST

autoload -U colors && colors

black="%{%F{8}%}"
red="%{$fg_bold[red]%}"
green="%{$fg_bold[green]%}"
yellow="%{$fg_bold[yellow]%}"
blue="%{$fg_bold[blue]%}"
magenta="%{$fg_bold[magenta]%}"
murasaki="%{%F{135}%}"
purple=$magenta
cyan="%{$fg_bold[cyan]%}"
white="%{$fg_bold[white]%}"
d_red="%{$fg_no_bold[red]%}"
d_green="%{$fg_no_bold[green]%}"
d_yellow="%{$fg_no_bold[yellow]%}"
d_blue="%{$fg_no_bold[blue]%}"
d_magenta="%{$fg_no_bold[magenta]%}"
d_purple=$d_magenta
d_cyan="%{$fg_no_bold[cyan]%}"
gray="%{$fg_no_bold[white]%}"
grey=$gray
end="%{$reset_color%}"
newline=$'\n'

local lcs_bar="%(?.${black}.${red})|${end}"

_dir_stack () {
    depth=$(dirs -p | wc -l | tr -d ' ')
    if [[ $depth -gt 1 ]]; then
        dir_stack_str=$(printf '%*s' ${depth} | tr ' ' ']')
        echo "${d_green}${dir_stack_str:1}"
    fi
}

_current_path () {
    # show first and last 3 folders if path is deeper than 5 layers
    echo "${green}[%6(~:%-1~/.../%3~:%~)]$(_dir_stack)${end}"
}

if [[ -n "$(command -v git)" ]]; then
    # Oh yes, we really have git
    _git_info () {
        local branch_name=$(git rev-parse --abbrev-ref HEAD 2>/dev/null)
        if [[ -n "$branch_name" ]]; then
            # we are now in a git repo
            local repo_root=$(git rev-parse --show-toplevel 2>/dev/null)
            local repo_name=""
            if [[ -n "$repo_root" ]]; then
                repo_name="$(basename $repo_root):"
            fi

            if [[ -f "$repo_root/.git/refs/stash" ]]; then
                local stashes_count=$(git stash list 2>/dev/null | wc -l | tr -d ' ')
                local stashes_stack_str=$(printf '%*s' ${stashes_count} | tr ' ' '(')
            fi

            local is_bare=$(git rev-parse --is-bare-repository 2>/dev/null)
            if [[ "$is_bare" == "true" ]]; then
                local color=${blue}
                branch_name='=BARE='
            elif [[ -z "$(git status --porcelain 2>/dev/null)" ]]; then
                # This repo is clean
                local color=${blue}
            elif [[ -z "$(git status -s -uno 2>/dev/null)" ]]; then
                # This repo is dirty, but no modify on tracked files
                local color=${magenta}
            else
                # This repo is dirty
                local color=${red}
            fi
            echo "${color}${stashes_stack_str}($repo_name${branch_name})${end}"
        fi
    }
else
    _git_info () {
        true
    }
fi

date_str="${cyan}%D{%m/%d}${end}"
time_str="${cyan}%D{%H:%M}${end}"   # %D{...} man strftime
vim_mode_str="${black}[zsh$ZSH_VERSION]${end}"
uname_str="${yellow}%n${end}"
at_str="${gray}@${end}"
hostname_str="${white}%m${end}"
uid_str="%(!.#.>)"

_virtual_env () {
    if [[ -n "${VIRTUAL_ENV}" ]]; then
        bname="$(basename ${VIRTUAL_ENV})"
        dname="$(dirname ${VIRTUAL_ENV})"
        if [[ "${dname}" = "${HOME}" ]]; then
            echo "${murasaki}[~/${bname}]${end}"
        else
            echo "${murasaki}[$(basename ${dname})/${bname}]${end}"
        fi
    fi
}

hook_pre_cmd () {
    t_cmd_start=$(( $(date +%s) * 1000 ))
}

hook_post_cmd () {
    t_cmd_end=$(( $(date +%s) * 1000 ))
    local delta_ms=$((t_cmd_end - t_cmd_start))
    local ms=$((delta_ms % 1000))
    local delta_sec=$((delta_ms / 1000))
    local SS=$((delta_sec % 60))
    local MM=$(((delta_sec / 60) % 60))
    local HH=$((delta_sec / 3600))
    local DD=$((delta_sec / 3600 / 24))

    local et=""
    if [ ${DD} -ne 0 ]; then
        et="${DD} days ${HH} hours ${MM} mins ${SS} secs"
    elif [ ${HH} -ne 0 ]; then
        et="${HH} hours ${MM} mins ${SS} secs"
    elif [ ${MM} -ne 0 ]; then
        et="${MM} mins ${SS} secs"
    elif [ ${SS} -ne 0 ]; then
        et="${SS} secs"
    else
        et=""
    fi

    if [ "${et}" != '' ]; then
        last_cmd_elapsed_time_ind="Last cmd elapsed: ${et}"
    else
        last_cmd_elapsed_time_ind=''
    fi
}

hook_pre_prompt () {
    today=$(date "+%Y%m%d")

    case ${KEYMAP} in
        vicmd)      local vim_mode_str="${cyan}:zsh$ZSH_VERSION:${end}" ;;
        viins|main) local vim_mode_str="${black}[zsh$ZSH_VERSION]${end}" ;;
    esac

    local jbs=''
    if [[ $#jobstates -ge 1 ]]; then
        jbs="${blue}jobs:$#jobstates${end}"
    fi

    local p=''

    if [ -n "${last_cmd_elapsed_time_ind}" ]; then
        p="${newline}${last_cmd_elapsed_time_ind}${newline}"
    fi

    local vg="$(_virtual_env)$(_git_info)"
    if [ -n "${vg}" ]; then
        p="${p}${lcs_bar}${vg}${jbs}${newline}"
    fi

    p="${p}${lcs_bar}${date_str}$(_current_path)${vim_mode_str}
${lcs_bar}${time_str}${uname_str}${at_str}${hostname_str}${uid_str} "

    PROMPT="${p}"
}

precmd () {
    if [ $had_cmd -eq 1 ]; then
        hook_post_cmd
    fi

    hook_pre_prompt
    last_cmd_elapsed_time_ind=''
    had_cmd=0
}

preexec () {
    had_cmd=1
    hook_pre_cmd
}

zle-keymap-select () {
    hook_pre_prompt
    zle reset-prompt
}

zle -N zle-keymap-select

hook_pre_prompt

had_cmd=0
