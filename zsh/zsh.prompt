setopt PROMPT_SUBST

autoload -U colors && colors

black="%{$fg_bold[black]%}"
red="%{$fg_bold[red]%}"
green="%{$fg_bold[green]%}"
yellow="%{$fg_bold[yellow]%}"
blue="%{$fg_bold[blue]%}"
magenta="%{$fg_bold[magenta]%}"
murasaki="%{%K{135}%}"
purple=$magenta
cyan="%{$fg_bold[cyan]%}"
white="%{$fg_bold[white]%}"
d_red="%{$fg_no_bold[red]%}"
d_green="%{$fg_no_bold[green]%}"
d_yellow="%{$fg_no_bold[yellow]%}"
d_blue="%{$fg_no_bold[blue]%}"
d_magenta="%{$fg_no_bold[magenta]%}"
d_purple=$d_magenta
d_cyan="%{$fg_no_bold[cyan]%}"
gray="%{$fg_no_bold[white]%}"
grey=$gray
end="%{$reset_color%}"

lcs_str="%(?.${black}.${red})|${end}"

_dir_stacks () {
    depth=$(dirs -p | wc -l | tr -d ' ')
    if [[ $depth -gt 1 ]]; then
        dir_stack_str=$(printf '%*s' ${depth} | tr ' ' '[')
        echo "${d_green}${dir_stack_str:1}"
    fi
}

_current_path () {
    # show first and last 3 folders if path is deeper than 5 layers
    echo "$(_dir_stacks)${green}[%6(~:%-1~/.../%3~:%~)]${end}"
}

if [[ -n "$(command -v git)" ]]; then
    # Oh yes, we really have git
    _git_info () {
        local branch_name=$(git rev-parse --abbrev-ref HEAD 2>/dev/null)
        if [[ -n "$branch_name" ]]; then
            # we are now in a git repo
            local repo_root=$(git rev-parse --show-toplevel 2>/dev/null)
            local repo_name=""
            if [[ -n "$repo_root" ]]; then
                repo_name="$(basename $repo_root):"
            fi

            if [[ -f "$repo_root/.git/refs/stash" ]]; then
                local stashes_count=$(git stash list 2>/dev/null | wc -l | tr -d ' ')
                local stashes_stack_str=$(printf '%*s' ${stashes_count} | tr ' ' '(')
            fi

            local is_bare=$(git rev-parse --is-bare-repository 2>/dev/null)
            if [[ "$is_bare" == "true" ]]; then
                local color=${blue}
                branch_name='=BARE='
            elif [[ -z "$(git status --porcelain 2>/dev/null)" ]]; then
                # This repo is clean
                local color=${blue}
            elif [[ -z "$(git status -s -uno 2>/dev/null)" ]]; then
                # This repo is dirty, but no modify on tracked files
                local color=${magenta}
            else
                # This repo is dirty
                local color=${red}
            fi
            echo "${color}${stashes_stack_str}($repo_name${branch_name})${end}"
        fi
    }
else
    _git_info () {
        true
    }
fi

date_str="${cyan}%D{%m/%d}${end}"
time_str="${cyan}%D{%H:%M}${end}"   # %D{...} man strftime
uname_str="${yellow}%n${end}"
at_str="${gray}@${end}"
hostname_str="${white}%m${end}"
uid_str="%(!.#.>)"

_virtual_env () {
    if [[ -n "${VIRTUAL_ENV}" ]]; then
        bname="$(basename ${VIRTUAL_ENV})"
        dname="$(dirname ${VIRTUAL_ENV})"
        if [[ "${dname}" = "${HOME}" ]]; then
            echo "${murasaki}[~/${bname}]${end}"
        else
            echo "${murasaki}[$(basename ${dname})/${bname}]${end}"
        fi
    fi
}

_refresh_prompt () {
    case ${KEYMAP} in
        vicmd)      local vim_mode_str="${cyan}:zsh$ZSH_VERSION:${end}" ;;
        viins|main) local vim_mode_str="${black}[zsh$ZSH_VERSION]${end}" ;;
    esac

    first_line="$(_virtual_env)$(_git_info)"
    if [[ $#jobstates -ge 1 ]]; then
        # this cannot be written in function
        # because $#jobstates does not passed into subshell
        first_line="${first_line}${blue}jobs:$#jobstates${end}"
    fi
    prompt="${lcs_str}${date_str}$(_current_path)${vim_mode_str}
${lcs_str}${time_str}${uname_str}${at_str}${hostname_str}${uid_str} "
    if [[ -n "${first_line}" ]]; then
        prompt="${lcs_str}${first_line}
$prompt"
    fi
}

zle-keymap-select zle-line-init () {
    _refresh_prompt
    today=$(date "+%Y%m%d")
    zle reset-prompt
}
zle -N zle-line-init
zle -N zle-keymap-select
