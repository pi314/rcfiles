" =============================================================================
" Plug initialization
" -----------------------------------------------------------------------------
if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')

" Plugins
Plug 'scrooloose/nerdtree'
" Plug 'jistr/vim-nerdtree-tabs'
Plug 'tomtom/tcomment_vim'
Plug 'tpope/vim-surround'
Plug 'dhruvasagar/vim-table-mode'
Plug 'pi314/ime.vim'
Plug 'pi314/ime-wide.vim'
Plug 'pi314/ime-braille.vim'
Plug 'pi314/ime-emoji.vim'
Plug 'pi314/ime-runes.vim'
Plug 'pi314/ime-phonetic.vim'
Plug 'pi314/pi314.asciiart.vim'
Plug 'pi314/pi314.rst.vim'
Plug 'pi314/todo-or-not-todo.vim'
Plug 'zdict/zdict.vim'
" Plug 'rust-lang/rust.vim'
" Plug 'dodie/vim-disapprove-deep-indentation'
" Plug 'junegunn/vader.vim'
" Plug 'johngrib/vim-game-code-break'
Plug 'pi314/logos.vim'
Plug 'preservim/vim-indent-guides'
Plug 'mg979/vim-visual-multi'
Plug 'airblade/vim-gitgutter'
Plug 'preservim/vim-markdown'
Plug 'pi314/markdont.vim', { 'frozen': 1 }

if !empty(glob('~/.vimrc-plugins.local'))
    source ~/.vimrc-plugins.local
endif

call plug#end()
" -----------------------------------------------------------------------------
" Plug initialization
" =============================================================================

" =============================================================================
" Options
" -----------------------------------------------------------------------------

" Encoding settings
let $LANG="zh_TW.UTF-8"
set encoding=utf8
set langmenu=zh_TW.UTF-8
try
    language message zh_TW.UTF-8
catch /E197/
    language message en_US.UTF-8
endtry

if has("win32")
    "reload menu with UTF-8 encoding
    source $VIMRUNTIME/delmenu.vim
    source $VIMRUNTIME/menu.vim
    set guifont=Consolas:h14:cANSI
endif

if has("gui_macvim") && has("gui_running")
    set guifont=Menlo:h18
endif

set fileformat=unix

set ambiwidth=single

" Show mode on bottom-left
set showmode

" Show command on bottom-right
set showcmd


set incsearch
set hlsearch
set colorcolumn=80  " put a vertical line on column 80

let macvim_skip_colorscheme = 1

colorscheme pi314


" Tab charactor related settings
set expandtab       " changes user pressed TAB to spaces
set smarttab
set nosmartindent
set autoindent
set tabstop=4       " changes the width of the TAB character
set shiftwidth=4    " >>, <<, == width and automatic indent width
set softtabstop=4
set listchars=tab:>-
set list

set wrap

" Ignore case on searching
set ignorecase

" Show the coordinate of cursor
set ruler

" Enable backspace
set backspace=indent,eol,start

" Show line numbers
set number

" Status line
set laststatus=2
set wildmenu
set wildmode=longest:list,full  " zsh-like completion

set scrolloff=5

" tell vim don't create {filename}~
set nobackup
set nowritebackup
if exists('+persistent_undo')
    " tell vim don't create .{filename}.un~
    set noundofile
endif

" set fold method as marker
set foldmethod=marker

" Funny Setting
set norightleft

" Disable X11 clipboard, it help vim not hanging on start
set clipboard=exclude:.*

" new vertical split appear on right hand side
set splitright
set splitbelow

set pastetoggle=<leader>p

set virtualedit=block

" Mouse settings
set mouse=a
set ttymouse=sgr

set t_BE=

" -----------------------------------------------------------------------------
" Options
" =============================================================================


" =============================================================================
" Mappings
" -----------------------------------------------------------------------------

" move moving between long wrapped lines
" must use nnoremap = no recursive map
" nnoremap k gk
" nnoremap j gj
" vnoremap k gk
" vnoremap j gj

nnoremap th :tabp<CR>
nnoremap tl :tabn<CR>
nnoremap tt :tabe<SPACE>
if exists(':tabm')
    nnoremap tp :tabm -1<CR>
    nnoremap tn :tabm +1<CR>
else
    nnoremap tp :execute "tabmove" (tabpagenr()-2)<CR>
    nnoremap tn :execute "tabmove" (tabpagenr()+1)<CR>
endif
nnoremap t! :tabn 1<CR>
nnoremap t@ :tabn 2<CR>
nnoremap t# :tabn 3<CR>
nnoremap t$ :tabn 4<CR>
nnoremap t% :tabn 5<CR>
nnoremap t^ :tabn 6<CR>
nnoremap t& :tabn 7<CR>
nnoremap t* :tabn 8<CR>
nnoremap t( :tabn 9<CR>

" Insert a new line in normal mode, I just lazy
nnoremap <expr> <CR> &ma ? "o\<ESC>0\"_D" : "\<CR>"

" map these by hand
inoremap <C-h> <BS>
nnoremap <C-h> <BS>

" hot key for macro register ``q`` / ``z``
" Do register ``q`` / ``z``
nnoremap dq @q
nnoremap dz @z

" redraw syntax highlighting
nnoremap <leader><C-l> :syntax sync fromstart<CR>

" redraw, also wipe search highlighting
nnoremap <C-l> :noh<CR><C-l>

" convenient copy to system clipboard
vnoremap Y "*ygv<ESC>
nnoremap Y "*y
vnoremap y ygv<ESC>

" QUIT!
command! Q execute "q!"
command! Qa execute "qa!"
command! QA execute "qa!"

" WRITE!
cnoremap w!! w !sudo tee %

" open file in new tab
nnoremap gF <C-w>gF

" indenting in visual mode
vnoremap > >gv
vnoremap < <gv

nnoremap gp `[V`]


function! CleanUnusedBuffers ()
    for l:bnr in range(1, bufnr('$'))
        if bufexists(l:bnr) && !bufloaded(l:bnr)
            execute "bwipeout ". l:bnr
        endif
    endfor
endfunction
nnoremap <SPACE> :call CleanUnusedBuffers()<CR>


" Handy shortcut to create a scratch buffer
function! s:new_scratch_buffer ()
    if bufname('%') == '' && &modified == 0 && line('$') == 1 && getline(1) == ''
    else
        tabedit
    endif
    set buftype=nofile
endfunction
nnoremap ,s :call <SID>new_scratch_buffer()<CR>


" Handy shortcut to trim trailing spaces
nnoremap <silent> ,t :%s/\v\s+$//e<CR>
vnoremap <silent> ,t :s/\v\s+$//e<CR>

" Hide Q mapping
nnoremap Q <nop>

" =============================================================================
" Handy function to toggle all window in all tabs
" -----------------------------------------------------------------------------
function! s:toggle_opt (option, scope)
    if a:scope == 'all'
        let l:my_tab_id = tabpagenr()
        exec 'let l:option_value = &'. a:option
        if !(l:option_value)
            exec 'tabdo windo set '. a:option
        else
            exec 'tabdo windo set no'. a:option
        endif

        exec 'tabn '. l:my_tab_id

    else
        exec 'set '. a:option .'!'

    endif

    exec 'set '. a:option .'?'
endfunction

function! s:set_opt (option, enable)
    if a:enable
        exec 'set '. a:option
    else
        exec 'set no'. a:option
    endif

    exec 'set '. a:option .'?'
endfunction
" -----------------------------------------------------------------------------
nnoremap ,C     :call <SID>toggle_opt('cursorline', 'all')<CR>
nnoremap ,c     :call <SID>toggle_opt('cursorline', 1)<CR>

nnoremap ,w     :call <SID>toggle_opt('wrap', 1)<CR>
nnoremap ,W     :call <SID>toggle_opt('wrap', 'all')<CR>

nnoremap ,i     :call <SID>toggle_opt('ignorecase', 1)<CR>

nnoremap ,z     :call <SID>toggle_opt('foldenable', 1)<CR>
nnoremap z0     :call <SID>set_opt('foldenable', v:false)<CR>
" =============================================================================

if has("win32")
    nnoremap ,v :tabedit $HOME/vimfiles/vimrc<CR>
else
    nnoremap ,v :tabedit $HOME/.vim/vimrc<CR>
endif

nnoremap ,* :let @/ = expand('<cword>') <bar> set hls <bar> echo @/<CR>
vnoremap ,* "vy:let @/ = '\V' . substitute(@v, "\n", '\\n', 'g') <bar> set hls <bar> echo @/<CR>


function! s:MoveCursorLeftSoftTab ()
    let l:left_indent = strlen(matchlist(getline('.'), '\v^ *')[0])
    let l:pos = col('.') - 1

    let l:ts = &softtabstop
    if l:ts == 0
        let l:ts = &tabstop
    endif

    if l:left_indent < l:pos
        return "\<Left>"
    elseif l:pos % l:ts == 0
        return repeat("\<Left>", l:ts)
    else
        return repeat("\<Left>", l:pos % l:ts)
    endif
endfunction
function! s:MoveCursorRightSoftTab ()
    let l:left_indent = strlen(matchlist(getline('.'), '\v^ *')[0])
    let l:pos = col('.') - 1

    let l:ts = &softtabstop
    if l:ts == 0
        let l:ts = &tabstop
    endif

    if l:left_indent <= l:pos
        return "\<Right>"
    elseif (l:left_indent - l:pos) <= l:ts
        return repeat("\<Right>", (l:left_indent - l:pos))
    else
        return repeat("\<Right>", l:ts - (l:pos % l:ts))
    endif
endfunction
inoremap <expr> <Left>  <SID>MoveCursorLeftSoftTab()
inoremap <expr> <Right> <SID>MoveCursorRightSoftTab()
nnoremap <expr> <Left>  <SID>MoveCursorLeftSoftTab()
nnoremap <expr> <Right> <SID>MoveCursorRightSoftTab()


nnoremap [[ vi[o<esc>
nnoremap ]] vi[<esc>


vnoremap [[ <nop>
vnoremap ]] <nop>


" status line, show plugin modes
function! VimTableModeStatusString ()
    if exists('*tablemode#IsActive') && tablemode#IsActive()
        return '[table]'
    endif
    return ''
endfunction


if !empty(glob('~/.vim/plugged/ime.vim'))
    set statusline=%<%{ime#icon()}%{VimTableModeStatusString()}%f\ %h%m%r%=%y\ %-14.(%l,%c%V%)\ %P
endif


" Resize window interactively
function! s:resize_mode ()
    let l:cmd_focus = {'h': 'h', 'j': 'j', 'k': 'k', 'l': 'l'}
    let l:cmd_resize = {'H': '<>', 'J': '+-', 'K': '-+', 'L': '><'}
    let l:statusline_usage = 'Resize: HJKL hjkl q <space>'
    let l:statusline_user = &l:statusline
    let l:cc = &colorcolumn
    call s:highlight_pane()
    let &l:statusline = l:statusline_usage
    redrawstatus
    try
        while 1
            let l:key = nr2char(getchar())
            if l:key == 'q' || l:key == 'Q' || l:key == ' '
                break
            elseif has_key(l:cmd_resize, l:key)
                let l:winnr_cur = winnr()
                if l:key == 'H' || l:key == 'L'
                    wincmd l
                    let l:winnr_probe = winnr()
                elseif l:key == 'J' || l:key == 'K'
                    wincmd j
                    let l:winnr_probe = winnr()
                endif
                execute l:winnr_cur .'wincmd w'
                execute 'wincmd '. l:cmd_resize[(l:key)][(l:winnr_cur == l:winnr_probe)]
                call s:highlight_pane()
            elseif has_key(l:cmd_focus, l:key)
                let &l:statusline = l:statusline_user
                let &colorcolumn = l:cc
                execute 'wincmd '. l:cmd_focus[(l:key)]
                let &l:statusline = l:statusline_usage
                let l:cc = &colorcolumn
                call s:highlight_pane()
            endif
            redraw
        endwhile
    catch
    endtry
    let &l:statusline = l:statusline_user
    let &colorcolumn = l:cc
endfunction
function! s:highlight_pane ()
    let &colorcolumn=join(range(1, winwidth(0)), ',')
endfunction
nnoremap <silent> <C-w><Space> :call <SID>resize_mode()<CR>

" -----------------------------------------------------------------------------
" Mappings
" =============================================================================

" =============================================================================
" Special settings
" -----------------------------------------------------------------------------

" Load template file when creating new files
augroup templates
    autocmd!
    autocmd BufNewFile *.py r $HOME/.vim/templates/template.py | 1d
    autocmd BufNewFile *.c r $HOME/.vim/templates/template.c | 1d
    autocmd BufNewFile *.cpp r $HOME/.vim/templates/template.cpp | 1d
augroup END


function! s:jump_to_filename_linenum (fname)
    let l:match = matchlist(a:fname, '\v^(%(\f|/)+):(\d+)$')

    if len(l:match) && len(l:match[1]) && len(l:match[2])
        exec 'edit ' . l:match[1]
        call cursor(l:match[2], 1)
        normal! zz^
    endif
endfunction

augroup fnamelinenum
    autocmd!
    autocmd BufNewFile * nested call s:jump_to_filename_linenum(@%)
augroup END

function! ExpandFileListToTab ()
    if &buftype != 'nofile'
        return
    endif

    " echom getline(1)
    " return

    let files = []
    for i in range(1, line('$'))
        let line = getline(i)
        let m = matchlist(line, '\v^(.*)(:([0-9]+):.*)?$')
        if m != []
            execute '$tabe +'. m[3] .' '. m[1]
            normal zz
            tabn
        endif
    endfor

    quit
endfunction
command! ExpandFileListToTab call ExpandFileListToTab()

" -----------------------------------------------------------------------------
" Special settings
" =============================================================================


" =============================================================================
" Plugin settings
" -----------------------------------------------------------------------------

let g:todo_next_checkbox = '<C-c>'
let g:todo_select_checkbox = '<C-k>'

" change nerdtree arrows
let g:NERDTreeMapOpenInTab = 'tt'
let g:NERDTreeDirArrowExpandable = '+'
let g:NERDTreeDirArrowCollapsible = '~'
let g:nerdtree_tabs_open_on_gui_startup = 0

let g:ime_plugins = ['builtin_boshiamy', 'builtin_kana', 'zhuyin', 'pinyin', 'builtin_chewing', 'builtin_unicode']
let g:ime_plugins += ['emoji', 'runes', 'wide', 'braille']
" let g:ime_select_mode_style = 'window'
let g:ime_boshiamy_custom_table = '~/.boshiamy.table'
let g:ime_phonetic_custom_table = '~/.phonetic.table'
let g:ime_enable_ime_buffer = 1

let g:rst_style = 0

let g:rst_title_style = 'shorten'
let g:rst_title_length_step = 2

let g:ime_braille_keys = '3ed4rfcv'

" -------------------------------------------------------------------------
" airblade/vim-gitgutter
" -------------------------------------------------------------------------
function! s:git_gutter_diff_orig ()
    if &buftype == 'nofile' && &diff
        quit

    else
        let my_gitgutter_buffers = filter(range(1, bufnr('$')), 'getbufvar(v:val, "git_gutter_orig_file") == "' . @% . '"')
        if len(my_gitgutter_buffers)
            exec 'bdelete ' . string(my_gitgutter_buffers[0])
            return
        endif

        let git_gutter_orig_file = @%
        GitGutterDiffOrig
        wincmd p
        let b:git_gutter_orig_file = git_gutter_orig_file
        wincmd p

    endif
endfunction

nnoremap ,d     :call <SID>git_gutter_diff_orig()<CR>zz
highlight SignColumn                ctermbg=0
highlight GitGutterAdd    ctermfg=2 ctermbg=0
highlight GitGutterChange ctermfg=3 ctermbg=0
highlight GitGutterDelete ctermfg=1 ctermbg=0

function! s:toggle_git_preview_hunk ()
    return gitgutter#hunk#is_preview_window_open() ? "\<c-w>z" : "\<Plug>(GitGutterPreviewHunk)"
endfunction
nnoremap <expr> ,gp <SID>toggle_git_preview_hunk()
nnoremap ,ga <Plug>(GitGutterStageHunk)
nnoremap ,gu <Plug>(GitGutterUndoHunk)

" -------------------------------------------------------------------------
" preservim/vim-markdown
" -------------------------------------------------------------------------
let g:vim_markdown_conceal = 0
let g:vim_markdown_conceal_code_blocks = 0
let g:vim_markdown_folding_disabled = 1

let g:vim_markdown_fenced_languages = ['python', 'shell', 'console=sh']

let g:vim_markdown_follow_anchor = 0

let g:vim_markdown_no_default_key_mappings = 1

" -------------------------------------------------------------------------
" preservim/vim-indent-guides
" -------------------------------------------------------------------------
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_guide_size = 1
nnoremap <silent> ,<bar> <Plug>IndentGuidesToggle

let g:indent_guides_auto_colors = 0
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=red   ctermbg=235
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=green ctermbg=235

" -----------------------------------------------------------------------------
" Plugin settings
" =============================================================================


if !empty(glob('~/.vimrc.local'))
    source ~/.vimrc.local
endif
