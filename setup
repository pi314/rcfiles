#!/bin/sh

install_zsh () { #{{{
    install zsh/zshrc .zshrc
    install zsh/zshenv .zshenv
} #}}}

install_tcsh () { #{{{
    install .tcshrc
} #}}}

install_bash () { #{{{
    install .bashrc
    install .bash_profile
} #}}}

install_screen () { #{{{
    install .screenrc
} #}}}

install_tmux () { #{{{
    install .tmux.conf
} #}}}

install_git () { #{{{
    cd $source_dir
    printf '  Acquiring information from .gitconfig ... '
    default_name=$(git config user.name)
    default_email=$(git config user.email)
    if [ -n "$default_name" ] || [ -n "$default_email" ]; then
        echo 'Found'
    else
        echo 'Not found'
        printf "  Try $source_dir/.gitconfig.user instead ... "
        if [ -f $source_dir/.gitconfig.user ]; then
            # ``read`` and pipe together creates a subshell,
            # so here comes the dirty work
            if [ $(cat $source_dir/.gitconfig.user | wc -l) -eq 2 ]; then
                echo 'Found'
                default_name=$(head -n 1 $source_dir/.gitconfig.user)
                default_email=$(head -n 2 $source_dir/.gitconfig.user | tail -n 1)
            else
                echo 'Broken'
                default_name=''
                default_email=''
            fi
        else
            echo 'Not found'
        fi
    fi

    while [ 1 ]; do
        if [ -n "$default_name" ]; then
            printf "  Input your user name [$default_name]: "
        else
            printf '  Input your user name: '
        fi
        read user_name
        if [ -z "$user_name" ]; then
            user_name="$default_name"
        fi

        if [ -n "$default_name" ]; then
            printf "  Input your user email [$default_email]: "
        else
            printf '  Input your user email: '
        fi
        read user_email
        if [ -z "$user_email" ]; then
            user_email="$default_email"
        fi

        echo '  ===================='
        echo '  [user]'
        echo "    name = $user_name"
        echo "    email = $user_email"
        echo '  ===================='
        printf '  Correct ? [Y/n] '
        read yn
        case "$yn" in
            Y | y | "")
                break
                ;;
            *)
                if [ -z "$default_name" ]; then
                    default_name="$user_name"
                    default_email="$user_email"
                fi
                ;;
        esac
    done

    printf '  Updating .gitconfig.user ... '
    echo "$user_name" > $source_dir/.gitconfig.user
    echo "$user_email" >> $source_dir/.gitconfig.user
    echo 'Done'

    printf '  Generating .girconfig.local ... '
    echo '[user]' > $source_dir/.gitconfig.local
    echo "    name = $user_name" >> $source_dir/.gitconfig.local
    echo "    email = $user_email" >> $source_dir/.gitconfig.local
    echo '' >> $source_dir/.gitconfig.local
    cat $source_dir/.gitconfig >> $source_dir/.gitconfig.local
    echo 'Done'

    install .gitconfig.local .gitconfig
} #}}}

install_vim () { #{{{
    install .vim
} #}}}

install_xonsh () { # {{{
    install .xonshrc
} # }}}

cd $(dirname $0)
source_dir=$(pwd -P)
cd - >/dev/null

targets=$(cat $source_dir/setup | grep '^install_.*()' | sed 's/install_\(.*\)().*$/\1/')

if [ $# -eq 0 ]; then
    echo 'Available targets:'
    echo '    all'
    echo "$targets" | sed 's/^/    /'
    exit 64 # man errno
fi

. $source_dir/.setup-tools

BACKUP_TOP_FOLDER=".old_rcfiles"
BACKUP_DIR_NAME="`date +%Y%m%d_%H%M%S`"
BACKUP_FILE_PATH="$HOME/$BACKUP_TOP_FOLDER/$BACKUP_DIR_NAME"

while [ $# -gt 0 ]; do
    if [ "$1" = 'all' ] || (echo "$targets" | grep "$1" >/dev/null 2>&1); then
        message_install_start $1
        install_${1}
        message_install_complete $1
        echo ''
    else
        message_unknown_target $1
    fi

    shift
done

if [ -d $BACKUP_FILE_PATH ]; then
    printf "Old files is in $BACKUP_FILE_PATH\n"
fi
